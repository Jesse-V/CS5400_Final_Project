
#ifndef TRIANGLE_STRUCT
#define TRIANGLE_STRUCT

#include <math.h>


/* Defines a three-dimensional point */
struct Point
{
	float x, y, z, w;

	Point(float s = float(0.0)):
		x(s), y(s), z(s), w(1)
	{}

	Point(float initialX, float initialY, float initialZ):
		x(initialX), y(initialY), z(initialZ), w(1)
	{}

	Point(float initialX, float initialY, float initialZ, float initialW):
		x(initialX), y(initialY), z(initialZ), w(initialW)
	{}


	bool operator<(const Point& other) const
	{
		if (fabs(x - other.x) < 0.00001)
			return y < other.y;
		return x < other.x;
	}



	Point operator+(const Point& other) const
	{
		Point result;
		result.x = x + other.x;
		result.y = y + other.y;
		result.z = z + other.z;
		return result;
	}



	Point operator*(const float factor) const
	{
		Point result;
		result.x = x * factor;
		result.y = y * factor;
		result.z = z * factor;
		return result;
	}



	Point operator/(const float factor) const
	{
		Point result;
		result.x = x / factor;
		result.y = y / factor;
		result.z = z / factor;
		return result;
	}



	Point& operator+=(const Point& other)
	{
		x += other.x;
		y += other.y;
		z += other.z;
		return *this;
	}
};


/* Defines a triangle, consistng of three Points */
struct Triangle
{
	Point A, B, C;
};

#endif
